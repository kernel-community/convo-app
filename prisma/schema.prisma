// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConvoType {
  JUNTO
  INTERVIEW
  TEST
  UNLISTED
}

enum LocationType {
  ONLINE
  MAP
  CUSTOM
}

model Convo {
  id              String       @id @default(uuid())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  title           String
  descriptionHtml String?
  slug            String
  limit           Int
  isDeleted       Boolean      @default(false)
  type            ConvoType    @default(JUNTO)
  proposers       User[]
  rsvps           Rsvp[]
  collections     Collection[]
  reminders       Email[]
  sessions        Session[]
}

model Session {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  startDateTime DateTime
  endDateTime   DateTime
  rrule         String?
  sequence      Int          @default(0)
  location      String
  locationType  LocationType @default(ONLINE)
  convoId       String
  convo         Convo        @relation(fields: [convoId], references: [id])
}

model User {
  id          String       @id @default(uuid())
  email       String?      @unique
  address     String?      @unique // deprecated
  nickname    String       @default("Anonymous")
  profile     Profile?
  convos      Convo[]
  rsvps       Rsvp[]
  collections Collection[]
  reminders   Email[]
}

model Profile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  bio       String?
  photo     String?
}

model Collection {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  convos    Convo[]
}

model Rsvp {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  convoId    String
  convo      Convo     @relation(fields: [convoId], references: [id])
  attendeeId String
  attendee   User      @relation(fields: [attendeeId], references: [id])
  rsvpType   RSVP_TYPE @default(GOING)

  @@unique([convoId, attendeeId])
}

enum RSVP_TYPE {
  GOING
  MAYBE
  NOT_GOING
}

//////////////////
///  SERVICES  ///
//////////////////

model Email {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  convoId    String
  convo      Convo     @relation(fields: [convoId], references: [id])
  reminderId String    @unique // Resend scheduled email id
  type       EmailType
  sent       Boolean   @default(false)
  delivered  Boolean   @default(false)
  bounced    Boolean   @default(false)
  cancelled  Boolean   @default(false)
}

enum EmailType {
  CREATE
  INVITE
  UPDATE
  REMINDER24HR
  REMINDER1HR
  REMINDER1MIN
  REMINDER1HRPROPOSER
}

model Slack {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  botToken  String
  channel   String
}
