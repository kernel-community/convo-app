// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum EventType {
  JUNTO
  UNLISTED
  INTERVIEW
  TEST
}

model Community {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displayName String
  description String
  subdomain   String   @unique
  events      Event[]
  slack       Slack?
}

enum LocationType {
  ONLINE
  MAP
  CUSTOM
}

model Event {
  id                 String               @id @default(uuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  title              String
  descriptionHtml    String?
  startDateTime      DateTime
  endDateTime        DateTime
  creationTimezone   String?
  location           String
  locationType       LocationType         @default(ONLINE)
  hash               String // @note deprecated
  series             Boolean // @note deprecated
  limit              Int
  rrule              String?
  sequence           Int                  @default(0)
  isDeleted          Boolean              @default(false)
  gCalEventId        String? // KEEP, DONT REMOVE
  type               EventType            @default(JUNTO)
  proposerId         String
  proposer           User                 @relation(fields: [proposerId], references: [id], onDelete: Cascade)
  rsvps              Rsvp[]
  collections        Collection[]
  reminders          Email[]
  communityId        String?
  community          Community?           @relation(fields: [communityId], references: [id])
  isImported         Boolean              @default(false)
  PostedSlackMessage PostedSlackMessage[]
  waitlist           Waitlist[]
}

model User {
  id          String       @id @default(uuid())
  email       String?      @unique
  address     String?      @unique // deprecated
  nickname    String       @default("Anonymous")
  profile     Profile?
  isBeta      Boolean      @default(false)
  events      Event[]
  rsvps       Rsvp[]
  collections Collection[]
  reminders   Email[]

  // connections
  Connections   Connections[] @relation("User")
  ConnectedUser Connections[] @relation("ConnectedUser")
  Waitlist      Waitlist[]
}

model Connections {
  id          String   @id @default(uuid())
  description String
  weight      Int
  fromId      String
  from        User     @relation("User", fields: [fromId], references: [id], onDelete: Cascade)
  toId        String
  to          User     @relation("ConnectedUser", fields: [toId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([fromId, toId])
}

model Profile {
  id                 String   @id @default(uuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id])
  // profile data
  bio                String?
  image              String?
  keywords           String[]
  url                String?
  currentAffiliation String?
}

model Collection {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  events    Event[]
}

model Rsvp {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  eventId    String
  event      Event     @relation(fields: [eventId], references: [id])
  attendeeId String
  attendee   User      @relation(fields: [attendeeId], references: [id])
  rsvpType   RSVP_TYPE @default(GOING)

  @@unique([eventId, attendeeId])
}

enum RSVP_TYPE {
  GOING
  MAYBE
  NOT_GOING
  REMINDER72HR
  REMINDER72HRPROPOSER
  OFF_WAITLIST
}

//////////////////
///  SERVICES  ///
//////////////////

model Email {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  eventId    String
  event      Event     @relation(fields: [eventId], references: [id])
  reminderId String    @unique // Resend scheduled email id
  type       EmailType
  sent       Boolean   @default(false)
  delivered  Boolean   @default(false)
  bounced    Boolean   @default(false)
  cancelled  Boolean   @default(false)
}

enum EmailType {
  CREATE
  INVITE
  UPDATE
  REMINDER24HR
  REMINDER1HR
  REMINDER1MIN
  REMINDER1HRPROPOSER
  REMINDER72HR
  REMINDER72HRPROPOSER
  OFF_WAITLIST
  WAITLISTED
}

model Slack {
  id                 String               @id @default(uuid())
  createdAt          DateTime             @default(now())
  botToken           String
  channel            String
  communityId        String?              @unique // one slack instance is associated with 1 community
  community          Community?           @relation(references: [id], fields: [communityId])
  PostedSlackMessage PostedSlackMessage[]
}

model PostedSlackMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  ts        String
  slack     Slack    @relation(references: [id], fields: [slackId])
  slackId   String

  @@unique([eventId, slackId])
}

model Waitlist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId]) // A user can only be on the waitlist for an event once
  @@index([eventId, createdAt]) // Index for efficient querying of the waitlist order
}
