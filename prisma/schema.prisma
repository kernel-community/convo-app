// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventType {
  JUNTO
  INTERVIEW // @note could be "unlisted" @anggxyz
  TEST
}

// deprecated -- donot use Communities anywhere
model Community {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displayName String
  description String
  subdomain   String   @unique
  events      Event[]
  slack       Slack?
  google      Google?
}

model Event {
  id              String       @id @default(uuid())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  title           String
  descriptionHtml String?
  startDateTime   DateTime
  endDateTime     DateTime
  location        String
  hash            String // @note deprecated
  series          Boolean // @note deprecated
  limit           Int
  rrule           String?
  sequence        Int          @default(0)
  // for deleted events
  // can be purged periodically
  isDeleted       Boolean      @default(false)
  // google
  // gCalEventRequested Boolean      @default(false) // remove, deprecated
  gCalEventId     String? // KEEP, DONT REMOVE
  // gCalId             String? // remove, deprecated
  type            EventType    @default(JUNTO)
  proposerId      String
  proposer        User         @relation(fields: [proposerId], references: [id], onDelete: Cascade)
  rsvps           Rsvp[]
  collections     Collection[]
  reminders       Email[]
  // deprecated
  communityId     String?
  // deprecated
  community       Community?   @relation(fields: [communityId], references: [id])
  // if the event was imported from convo.kernel.community
  // if it was, we do not have their RSVPs, since this version uses
  // user's addresses to make them unique and the previous version used
  // email addresses
  // having isImported = true, means
  // the UI will show an info box mentioning "This event was imported from the previous version of the app
  // and the total number of RSVPs might not be accurate. Please email
  // if you'd like to query any data related to RSVPs for this particular event"
  // the emails[], gcaleventREquested, gcalEventId will be accurate for these events
  // the proposer data will be inaccurate
  isImported      Boolean      @default(false)
}

model User {
  id          String       @id @default(uuid())
  email       String?      @unique
  address     String?      @unique // deprecated
  nickname    String       @default("Anonymous")
  profile     Profile?
  events      Event[]
  rsvps       Rsvp[]
  collections Collection[]
  reminders   Email[]
}

model Profile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  bio       String?
  photo     String?
}

model Collection {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  events    Event[]
}

model Rsvp {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  eventId    String
  event      Event    @relation(fields: [eventId], references: [id])
  attendeeId String
  attendee   User     @relation(fields: [attendeeId], references: [id])

  @@unique([eventId, attendeeId])
}

//////////////////
///  SERVICES  ///
//////////////////

model Email {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  eventId    String
  event      Event     @relation(fields: [eventId], references: [id])
  reminderId String    @unique // Resend scheduled email id
  type       EmailType
  sent       Boolean   @default(false)
  delivered  Boolean   @default(false)
  bounced    Boolean   @default(false)
  cancelled  Boolean   @default(false)
}

enum EmailType {
  CREATE
  INVITE
  UPDATE
  REMINDER24HR
  REMINDER1HR
  REMINDER1MIN
  REMINDER1HRPROPOSER
}

// @deprecated
model Google {
  id                      String     @id @default(uuid())
  createdAt               DateTime   @default(now())
  // credentials
  clientId                String
  projectId               String
  authUri                 String
  tokenUri                String
  authProviderX509CertUrl String
  clientSecret            String
  redirectUris            String[]
  javascriptOrigins       String[]
  // token
  accessToken             String
  refreshToken            String
  scope                   String
  tokenType               String
  expiryDate              String
  // the calendar to send events to
  calendarId              String?
  communityId             String?    @unique // one google service is associated with 1 community
  community               Community? @relation(references: [id], fields: [communityId])
}

model Slack {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  botToken    String
  channel     String
  communityId String?    @unique // one slack instance is associated with 1 community
  community   Community? @relation(references: [id], fields: [communityId])
}
